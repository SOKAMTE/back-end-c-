// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using offreService.Data;

namespace offreService.Migrations
{
    [DbContext(typeof(OffreServiceContext))]
    [Migration("20200918231133_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("offreService.Models.Admin", b =>
                {
                    b.Property<int>("idAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("mail")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(10);

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(50);

                    b.HasKey("idAdmin");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("offreService.Models.AdminClient", b =>
                {
                    b.Property<int>("idAdmin")
                        .HasColumnType("int");

                    b.Property<int>("idClient")
                        .HasColumnType("int");

                    b.HasKey("idAdmin", "idClient");

                    b.HasIndex("idClient");

                    b.ToTable("AdminClient");
                });

            modelBuilder.Entity("offreService.Models.Article", b =>
                {
                    b.Property<int>("IdArticle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArticleTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(30);

                    b.Property<decimal>("prix")
                        .HasColumnType("decimal(64)")
                        .HasMaxLength(30);

                    b.HasKey("IdArticle");

                    b.HasIndex("ArticleTypeID");

                    b.HasIndex("ClientID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("offreService.Models.ArticleType", b =>
                {
                    b.Property<int>("idArticleType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("dateDebut")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("dateFin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("nomType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(30);

                    b.HasKey("idArticleType");

                    b.ToTable("ArticleTypes");
                });

            modelBuilder.Entity("offreService.Models.Client", b =>
                {
                    b.Property<int>("idClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("mail")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(50);

                    b.Property<decimal>("numero")
                        .HasColumnType("decimal(64)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(50);

                    b.HasKey("idClient");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("offreService.Models.Commentaire", b =>
                {
                    b.Property<int>("idCommentaire")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<string>("message")
                        .HasColumnType("varchar(255)");

                    b.HasKey("idCommentaire");

                    b.HasIndex("ClientID");

                    b.ToTable("Commentaires");
                });

            modelBuilder.Entity("offreService.Models.Compte", b =>
                {
                    b.Property<int>("idCompte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<string>("dateConnexion")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("dateCreation")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(50);

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(50);

                    b.HasKey("idCompte");

                    b.HasIndex("ClientID");

                    b.ToTable("Comptes");
                });

            modelBuilder.Entity("offreService.Models.Discussion", b =>
                {
                    b.Property<int>("idDiscussion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("message")
                        .HasColumnType("varchar(255)");

                    b.HasKey("idDiscussion");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("offreService.Models.DiscussionClient", b =>
                {
                    b.Property<int>("idDiscussion")
                        .HasColumnType("int");

                    b.Property<int>("idClient")
                        .HasColumnType("int");

                    b.HasKey("idDiscussion", "idClient");

                    b.HasIndex("idClient");

                    b.ToTable("DiscussionClient");
                });

            modelBuilder.Entity("offreService.Models.AdminClient", b =>
                {
                    b.HasOne("offreService.Models.Admin", "Admin")
                        .WithMany("AdminClients")
                        .HasForeignKey("idAdmin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offreService.Models.Client", "Client")
                        .WithMany("AdminClients")
                        .HasForeignKey("idClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("offreService.Models.Article", b =>
                {
                    b.HasOne("offreService.Models.ArticleType", "ArticleType")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offreService.Models.Client", "Client")
                        .WithMany("Articles")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("offreService.Models.Commentaire", b =>
                {
                    b.HasOne("offreService.Models.Client", "Client")
                        .WithMany("Commentaires")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("offreService.Models.Compte", b =>
                {
                    b.HasOne("offreService.Models.Client", "Client")
                        .WithMany("Comptes")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("offreService.Models.DiscussionClient", b =>
                {
                    b.HasOne("offreService.Models.Client", "Client")
                        .WithMany("DiscussionClients")
                        .HasForeignKey("idClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offreService.Models.Discussion", "Discussion")
                        .WithMany("DiscussionClients")
                        .HasForeignKey("idDiscussion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
